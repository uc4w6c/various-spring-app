server:
  application.name: resilience4j-client
  port : 8080

management.endpoints.web.exposure.include: '*'
management.endpoint.health.show-details: always

management.health.diskspace.enabled: false
management.health.circuitbreakers.enabled: true
management.health.ratelimiters.enabled: false

info:
  name: ${spring.application.name}
  description: resilience4j demo
  environment: ${spring.profiles.active}
  version: 0.0.1

management.metrics.tags.application: ${spring.application.name}
management.metrics.distribution.percentiles-histogram.http.server.requests: true
management.metrics.distribution.percentiles-histogram.resilience4j.circuitbreaker.calls: true

resilience4j.circuitbreaker:
  instances:
    backendA: # 設定したい接続先システムを指定
      registerHealthIndicator: true
      slidingWindowType: COUNT_BASED # slidingWindowTypeをカウントベースにする
      slidingWindowSize: 3 # ここで指定した数のコール数を保持してエラーレートの計算に利用する
      minimumNumberOfCalls: 1 # エラーレートを計算するのに必要な最小のコール数
      permittedNumberOfCallsInHalfOpenState: 3 # HALF_OPENの時に許可される呼び出しの数
      automaticTransitionFromOpenToHalfOpenEnabled: true # trueだと自動でHALF_OPENに移行する
      waitDurationInOpenState: 10s # OPENからHALF_OPENに移行する前に待機する時間
      failureRateThreshold: 50 # 失敗率の閾値。この数値を超えて失敗しているとOPENに移行する
      # eventConsumerBufferSize: 10
      recordExceptions: # ここで指定したExceptionが発生すると失敗としてカウントする
        # - java.util.concurrent.TimeoutException
        # - java.io.IOException
        # - java.lang.RuntimeException
        - org.springframework.web.client.HttpServerErrorException

resilience4j.bulkhead:
  instances:
    backendA:
      maxConcurrentCalls: 1

resilience4j.retry:
  instances:
    backendA:
      maxAttempts: 2 # 最大試行回数
      waitDuration: 2s # 再試行する前に待つ時間
      retryExceptions:
        - org.springframework.web.client.HttpServerErrorException

resilience4j.ratelimiter:
  instances:
    backendA:
      limitForPeriod: 1 # 指定した期間の間に呼び出し可能な回数
      limitRefreshPeriod: 10s # 計測する期間
      timeoutDuration: 5s # スレッドが待機するデフォルトの時間
      registerHealthIndicator: true
      eventConsumerBufferSize: 100

resilience4j.timelimiter:
  instances:
    backendA:
      timeoutDuration: 4s # タイムアウトする時間の設定
      cancelRunningFuture: false # タイムアウト時に処理をキャンセルするか
